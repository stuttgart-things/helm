---
version: 3
vars:
  PROJECT:
    sh: echo ${PROJECT}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  CROSSPLANE_PACKAGE_REGISTRY: ghcr.io
  DAGGER_CROSSPLANE_MODULE: github.com/stuttgart-things/dagger/crossplane
  DAGGER_CROSSPLANE_MODULE_VERSION: v0.0.2
  TEST_FILES: tests/helmfiles.yaml
  TEST_DIR: /tmp/helmfiles
  TEST_DEFAULTS: tests/defaults.yaml
  DEV_CLUSTER: tests/cluster.yaml
  DEV_CLUSTER_DIR: /tmp/helmfiles/cluster

tasks:
  tasks:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' Taskfile.yaml | sed 's/^- //' | gum choose)
        task ${task}

  kind:
    desc: Create, Start & Configure kind cluster
    cmds:
      - rm -rf {{ .DEV_CLUSTER_DIR }}/* && mkdir {{ .DEV_CLUSTER_DIR }} || true
      - |
        machineshop render \
        --source local \
        --template {{ .DEV_CLUSTER }} \
        --output file \
        --values "clusterName={{ .CLUSTER_NAME }}" \
        --kind multikey \
        --key kind \
        --destination {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}.yaml

      - |
        if kind get clusters | grep -wq "{{ .CLUSTER_NAME }}"; then
          echo "Cluster '{{ .CLUSTER_NAME }}' exists (already). Deleting it..."
          kind delete clusters "{{ .CLUSTER_NAME }}"
        fi

      - |
        kind create cluster --config {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}.yaml --name {{ .CLUSTER_NAME }} --kubeconfig ~/.kube/kind-{{ .CLUSTER_NAME }}
        kubectl get nodes --kubeconfig ~/.kube/kind-{{ .CLUSTER_NAME }}

      - |
        machineshop render \
        --source local \
        --template {{ .DEV_CLUSTER }} \
        --output file \
        --kind multikey \
        --key kind-infra \
        --destination {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-kind-infra.yaml \
        --values "source={{ .USER_WORKING_DIR }}"

      - |
        #!/usr/bin/env bash
        start_time=$(date +%s)
        timeout=60  # seconds

        while true; do
          echo "Running helmfile apply..."
          helmfile apply -f {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-kind-infra.yaml && \
          echo "Running helmfile sync..." && \
          helmfile sync -f {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-kind-infra.yaml && \
          { echo "Commands succeeded. Exiting loop."; break; }

          current_time=$(date +%s)
          elapsed=$(( current_time - start_time ))
          if [ $elapsed -ge $timeout ]; then
            echo "Commands are still failing after one minute. Exiting with error."
            exit 1
          fi
          echo "Retrying in 5 seconds..."
          sleep 5
        done
    vars:
      CLUSTER_NAME: helm-dev



  k3d:
    desc: Create, Start & Configure k3d cluster
    cmds:
      - |
        if k3d cluster list --no-headers | grep -wq "{{ .CLUSTER_NAME }}"; then
          echo "Cluster '{{ .CLUSTER_NAME }}' exists (already). Deleting it..."
          k3d cluster delete "{{ .CLUSTER_NAME }}"
        else
          echo "Cluster '{{ .CLUSTER_NAME }}' does not exist."
        fi
      - rm -rf {{ .DEV_CLUSTER_DIR }}/* && mkdir {{ .DEV_CLUSTER_DIR }} || true
      - |
        machineshop render \
        --source local \
        --template {{ .DEV_CLUSTER }} \
        --output file \
        --values "clusterName={{ .CLUSTER_NAME }}" \
        --kind multikey \
        --key cluster \
        --destination {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}.yaml
      - k3d cluster create --config {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}.yaml
      - k3d kubeconfig get {{ .CLUSTER_NAME }} > ~/.kube/{{ .CLUSTER_NAME }}
      - |
        SUBNET=$({{ .CONTAINER_RUNTIME }} network inspect k3d-{{ .CLUSTER_NAME }} | grep -oP '(?<="Subnet": ")[^"]+')
        BASE_IP=$(echo $SUBNET | cut -d'.' -f1-2)
        START_IP="${BASE_IP}.255.200"
        END_IP="${BASE_IP}.255.250"
        IP_RANGE="${START_IP}-${END_IP}"
        echo "${IP_RANGE}"

        machineshop render \
        --source local \
        --template {{ .DEV_CLUSTER }} \
        --output file \
        --kind multikey \
        --key ip \
        --destination {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-ip.yaml \
        --values "source={{ .USER_WORKING_DIR }},ipRange=${IP_RANGE}"

        machineshop render \
        --source local \
        --template {{ .DEV_CLUSTER }} \
        --output file \
        --kind multikey \
        --key ingress \
        --destination {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-ingress.yaml \
        --values "source={{ .USER_WORKING_DIR }},ipRange=${IP_RANGE}"


      #- helmfile template -f {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-ip.yaml
      - helmfile apply -f {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-ip.yaml || true
      - helmfile sync -f {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-ip.yaml || true

      #- helmfile template -f {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-ingress.yaml
      - helmfile apply -f {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-ingress.yaml

      # - helmfile template -f {{ .DEV_CLUSTER_DIR }}/{{ .CLUSTER_NAME }}-infra.yaml > {{ .DEV_CLUSTER_DIR }}/rendered.yaml --include-crds
      # - |
      #   kubectl --kubeconfig ~/.kube/{{ .CLUSTER_NAME }} create ns metallb-system
      #   kubectl --kubeconfig ~/.kube/{{ .CLUSTER_NAME }} create ns ingress-nginx
      #   kubectl --kubeconfig ~/.kube/{{ .CLUSTER_NAME }} create ns cert-manager
      # - kubectl apply --kubeconfig ~/.kube/{{ .CLUSTER_NAME }} -f {{ .DEV_CLUSTER_DIR }}/rendered.yaml || true
      # - sleep 15 && kubectl apply --kubeconfig ~/.kube/{{ .CLUSTER_NAME }} -f {{ .DEV_CLUSTER_DIR }}/rendered.yaml || true
    vars:
      CONTAINER_RUNTIME: docker
      CLUSTER_CONFIG_DIR: /tests
      CLUSTER_NAME: k3d-dev

  switch-remote:
    desc: Switch to remote branch
    cmds:
      - |
        git fetch
        branches=($(git branch -r | grep -v 'origin/HEAD' | sed 's|origin/||'))
        branch=$(printf "%s\n" "${branches[@]}" | gum choose)
        git switch -c ${branch} --track origin/${branch}
        git branch && git status

  switch-local:
    desc: Switch to local branch
    cmds:
      - |
        branches=$(git branch -a | grep -v 'remotes')
        branch=$(printf "%s\n" "${branches[@]}" | gum choose)
        git checkout ${branch} && git pull

  create-test-app:
    desc: Switch to local branch
    cmds:
      - rm -rf {{ .TEST_DIR }}/* && mkdir {{ .TEST_DIR }} || true
      - |
        app=$(yq '.template | keys | .[]' tests/helmfiles.yaml | gum choose)
        folder=$(find {{ .SEARCH_FOLDERS }} -type f -name "${app}.yaml" -exec dirname {} \; | sort -u)

        machineshop render \
        --source local \
        --template {{ .TEST_FILES }} \
        --output file \
        --kind multikey \
        --key ${app} \
        --destination {{ .TEST_DIR }}/${app}.yaml \
        --values "source={{ .USER_WORKING_DIR }}/${folder}/${app}.yaml"

        helmfile template -f {{ .TEST_DIR }}/${app}.yaml
        echo "Change to: cd {{ .TEST_DIR }}"
        echo "Apply: helmfile apply -f {{ .TEST_DIR }}/${app}.yaml"
        code {{ .TEST_DIR }}/${app}.yaml
    vars:
      SEARCH_FOLDERS: "infra apps database"

  tests-create-includes:
    desc: Create test files
    cmds:
      - rm -rf {{ .TEST_DIR }}/* && mkdir {{ .TEST_DIR }} || true
      - |
        for app in $(yq '.template | keys | .[]' {{ .TEST_FILES }}); do

          echo "Creating: ${app} include"

          machineshop render \
          --source local \
          --template {{ .TEST_FILES }} \
          --output file \
          --kind multikey \
          --key ${app} \
          --destination {{ .TEST_DIR }}/${app}.yaml \
          --defaults {{ .TEST_DEFAULTS }}

        done

  tests-render-includes:
    desc: Test render includes
    cmds:
      - task: tests-create-includes
      - |
        for app in $(yq '.template | keys | .[]' {{ .TEST_FILES }}); do

          echo "Rendering: ${app}"
          export HELMFILE_CACHE_HOME={{ .TEST_DIR }}/cache
          helmfile deps -f {{ .TEST_DIR }}/${app}.yaml
          helmfile template -f {{ .TEST_DIR }}/${app}.yaml

        done

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  check:
    desc: "Run pre-commit hooks"
    cmds:
      - pre-commit run -a

  run-pre-commit-hook:
    deps:
      - check
    desc: "Run the pre-commit hook script to replace .example.com with .example.com"
    cmds:
      - |
        # Find all YAML files in the repository recursively, excluding Taskfile.yaml
        files=$(find . -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.yml" -o -name "*.md" \) ! -name "Taskfile.yaml")

        # Loop through each file
        for file in $files; do
          # Skip binary files
          if file "$file" | grep -q "text"; then
            # Replace the string and update the file
            sed -i 's/\.sva\.de/\.example\.com/g' "$file"
          fi
        done

        # Add all modified YAML files back to staging
        git add $(git ls-files --modified | grep -E '\.ya?ml$')

        exit 0
    silent: false

  commit:
    desc: Commit + push code into branch
    deps:
      - check
    cmds:
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - git status
      - |
        git add *
        git status
        if [[ -n $(git status --porcelain) ]]; then
          echo "Review the changes above."
          gum confirm "Do you want to commit these changes?" || exit 0

          echo "ENTER COMMIT MESSAGE"
          COMMIT_MESSAGE=$(gum choose "feat: {{ .BRANCH }}" "fix: {{ .BRANCH }}" "BREAKING CHANGE: {{ .BRANCH }}" "ENTER CUSTOM COMMIT MESSAGE")

          if [ "$COMMIT_MESSAGE" == "ENTER CUSTOM COMMIT MESSAGE" ]; then
            COMMIT_MESSAGE=$(gum input --placeholder "scope" --value "commit to {{ .BRANCH }}")
          fi

          git commit --allow-empty -a -m "$COMMIT_MESSAGE"
        else
          echo "No changes to commit."
        fi
      - git push origin -u {{ .BRANCH }}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 2s
      # - gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull

  release:
    deps:
      - check
    desc: push new version
    cmds:
      - task: pr
      - npx semantic-release --dry-run
      - npx semantic-release --debug --no-ci
      - echo released version $(git describe --tags --abbrev=0)
